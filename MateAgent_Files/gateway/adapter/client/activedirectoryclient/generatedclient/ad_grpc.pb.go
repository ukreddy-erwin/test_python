// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package adpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActiveDirectoryServiceClient is the client API for ActiveDirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveDirectoryServiceClient interface {
	ActiveDirectorySession(ctx context.Context, opts ...grpc.CallOption) (ActiveDirectoryService_ActiveDirectorySessionClient, error)
}

type activeDirectoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveDirectoryServiceClient(cc grpc.ClientConnInterface) ActiveDirectoryServiceClient {
	return &activeDirectoryServiceClient{cc}
}

func (c *activeDirectoryServiceClient) ActiveDirectorySession(ctx context.Context, opts ...grpc.CallOption) (ActiveDirectoryService_ActiveDirectorySessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActiveDirectoryService_ServiceDesc.Streams[0], "/adgeneratedclient.ActiveDirectoryService/ActiveDirectorySession", opts...)
	if err != nil {
		return nil, err
	}
	x := &activeDirectoryServiceActiveDirectorySessionClient{stream}
	return x, nil
}

type ActiveDirectoryService_ActiveDirectorySessionClient interface {
	Send(*AdSessionReq) error
	Recv() (*AdSessionResp, error)
	grpc.ClientStream
}

type activeDirectoryServiceActiveDirectorySessionClient struct {
	grpc.ClientStream
}

func (x *activeDirectoryServiceActiveDirectorySessionClient) Send(m *AdSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *activeDirectoryServiceActiveDirectorySessionClient) Recv() (*AdSessionResp, error) {
	m := new(AdSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActiveDirectoryServiceServer is the server API for ActiveDirectoryService service.
// All implementations must embed UnimplementedActiveDirectoryServiceServer
// for forward compatibility
type ActiveDirectoryServiceServer interface {
	ActiveDirectorySession(ActiveDirectoryService_ActiveDirectorySessionServer) error
	mustEmbedUnimplementedActiveDirectoryServiceServer()
}

// UnimplementedActiveDirectoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActiveDirectoryServiceServer struct {
}

func (UnimplementedActiveDirectoryServiceServer) ActiveDirectorySession(ActiveDirectoryService_ActiveDirectorySessionServer) error {
	return status.Errorf(codes.Unimplemented, "method ActiveDirectorySession not implemented")
}
func (UnimplementedActiveDirectoryServiceServer) mustEmbedUnimplementedActiveDirectoryServiceServer() {
}

// UnsafeActiveDirectoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActiveDirectoryServiceServer will
// result in compilation errors.
type UnsafeActiveDirectoryServiceServer interface {
	mustEmbedUnimplementedActiveDirectoryServiceServer()
}

func RegisterActiveDirectoryServiceServer(s grpc.ServiceRegistrar, srv ActiveDirectoryServiceServer) {
	s.RegisterService(&ActiveDirectoryService_ServiceDesc, srv)
}

func _ActiveDirectoryService_ActiveDirectorySession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActiveDirectoryServiceServer).ActiveDirectorySession(&activeDirectoryServiceActiveDirectorySessionServer{stream})
}

type ActiveDirectoryService_ActiveDirectorySessionServer interface {
	Send(*AdSessionResp) error
	Recv() (*AdSessionReq, error)
	grpc.ServerStream
}

type activeDirectoryServiceActiveDirectorySessionServer struct {
	grpc.ServerStream
}

func (x *activeDirectoryServiceActiveDirectorySessionServer) Send(m *AdSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *activeDirectoryServiceActiveDirectorySessionServer) Recv() (*AdSessionReq, error) {
	m := new(AdSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActiveDirectoryService_ServiceDesc is the grpc.ServiceDesc for ActiveDirectoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActiveDirectoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adgeneratedclient.ActiveDirectoryService",
	HandlerType: (*ActiveDirectoryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActiveDirectorySession",
			Handler:       _ActiveDirectoryService_ActiveDirectorySession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ad.proto",
}
