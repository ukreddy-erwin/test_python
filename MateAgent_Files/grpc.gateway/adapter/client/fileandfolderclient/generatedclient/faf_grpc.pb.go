// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fafpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FAFServiceClient is the client API for FAFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FAFServiceClient interface {
	FAFSession(ctx context.Context, opts ...grpc.CallOption) (FAFService_FAFSessionClient, error)
}

type fAFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFAFServiceClient(cc grpc.ClientConnInterface) FAFServiceClient {
	return &fAFServiceClient{cc}
}

func (c *fAFServiceClient) FAFSession(ctx context.Context, opts ...grpc.CallOption) (FAFService_FAFSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &FAFService_ServiceDesc.Streams[0], "/fafgeneratedclient.FAFService/FAFSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &fAFServiceFAFSessionClient{stream}
	return x, nil
}

type FAFService_FAFSessionClient interface {
	Send(*FAFSessionReq) error
	Recv() (*FAFSessionResp, error)
	grpc.ClientStream
}

type fAFServiceFAFSessionClient struct {
	grpc.ClientStream
}

func (x *fAFServiceFAFSessionClient) Send(m *FAFSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fAFServiceFAFSessionClient) Recv() (*FAFSessionResp, error) {
	m := new(FAFSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FAFServiceServer is the server API for FAFService service.
// All implementations must embed UnimplementedFAFServiceServer
// for forward compatibility
type FAFServiceServer interface {
	FAFSession(FAFService_FAFSessionServer) error
	mustEmbedUnimplementedFAFServiceServer()
}

// UnimplementedFAFServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFAFServiceServer struct {
}

func (UnimplementedFAFServiceServer) FAFSession(FAFService_FAFSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method FAFSession not implemented")
}
func (UnimplementedFAFServiceServer) mustEmbedUnimplementedFAFServiceServer() {}

// UnsafeFAFServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FAFServiceServer will
// result in compilation errors.
type UnsafeFAFServiceServer interface {
	mustEmbedUnimplementedFAFServiceServer()
}

func RegisterFAFServiceServer(s grpc.ServiceRegistrar, srv FAFServiceServer) {
	s.RegisterService(&FAFService_ServiceDesc, srv)
}

func _FAFService_FAFSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FAFServiceServer).FAFSession(&fAFServiceFAFSessionServer{stream})
}

type FAFService_FAFSessionServer interface {
	Send(*FAFSessionResp) error
	Recv() (*FAFSessionReq, error)
	grpc.ServerStream
}

type fAFServiceFAFSessionServer struct {
	grpc.ServerStream
}

func (x *fAFServiceFAFSessionServer) Send(m *FAFSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fAFServiceFAFSessionServer) Recv() (*FAFSessionReq, error) {
	m := new(FAFSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FAFService_ServiceDesc is the grpc.ServiceDesc for FAFService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FAFService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fafgeneratedclient.FAFService",
	HandlerType: (*FAFServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FAFSession",
			Handler:       _FAFService_FAFSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "faf.proto",
}
