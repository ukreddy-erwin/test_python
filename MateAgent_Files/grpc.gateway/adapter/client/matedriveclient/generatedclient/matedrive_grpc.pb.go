// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mdpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatedriveServiceClient is the client API for MatedriveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatedriveServiceClient interface {
	MatedriveSession(ctx context.Context, opts ...grpc.CallOption) (MatedriveService_MatedriveSessionClient, error)
}

type matedriveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatedriveServiceClient(cc grpc.ClientConnInterface) MatedriveServiceClient {
	return &matedriveServiceClient{cc}
}

func (c *matedriveServiceClient) MatedriveSession(ctx context.Context, opts ...grpc.CallOption) (MatedriveService_MatedriveSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatedriveService_ServiceDesc.Streams[0], "/matedrivegeneratedclient.MatedriveService/MatedriveSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &matedriveServiceMatedriveSessionClient{stream}
	return x, nil
}

type MatedriveService_MatedriveSessionClient interface {
	Send(*MatedriveSessionReq) error
	Recv() (*MatedriveSessionResp, error)
	grpc.ClientStream
}

type matedriveServiceMatedriveSessionClient struct {
	grpc.ClientStream
}

func (x *matedriveServiceMatedriveSessionClient) Send(m *MatedriveSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *matedriveServiceMatedriveSessionClient) Recv() (*MatedriveSessionResp, error) {
	m := new(MatedriveSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatedriveServiceServer is the server API for MatedriveService service.
// All implementations must embed UnimplementedMatedriveServiceServer
// for forward compatibility
type MatedriveServiceServer interface {
	MatedriveSession(MatedriveService_MatedriveSessionServer) error
	mustEmbedUnimplementedMatedriveServiceServer()
}

// UnimplementedMatedriveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatedriveServiceServer struct {
}

func (UnimplementedMatedriveServiceServer) MatedriveSession(MatedriveService_MatedriveSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method MatedriveSession not implemented")
}
func (UnimplementedMatedriveServiceServer) mustEmbedUnimplementedMatedriveServiceServer() {}

// UnsafeMatedriveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatedriveServiceServer will
// result in compilation errors.
type UnsafeMatedriveServiceServer interface {
	mustEmbedUnimplementedMatedriveServiceServer()
}

func RegisterMatedriveServiceServer(s grpc.ServiceRegistrar, srv MatedriveServiceServer) {
	s.RegisterService(&MatedriveService_ServiceDesc, srv)
}

func _MatedriveService_MatedriveSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatedriveServiceServer).MatedriveSession(&matedriveServiceMatedriveSessionServer{stream})
}

type MatedriveService_MatedriveSessionServer interface {
	Send(*MatedriveSessionResp) error
	Recv() (*MatedriveSessionReq, error)
	grpc.ServerStream
}

type matedriveServiceMatedriveSessionServer struct {
	grpc.ServerStream
}

func (x *matedriveServiceMatedriveSessionServer) Send(m *MatedriveSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *matedriveServiceMatedriveSessionServer) Recv() (*MatedriveSessionReq, error) {
	m := new(MatedriveSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatedriveService_ServiceDesc is the grpc.ServiceDesc for MatedriveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatedriveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matedrivegeneratedclient.MatedriveService",
	HandlerType: (*MatedriveServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MatedriveSession",
			Handler:       _MatedriveService_MatedriveSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "matedrive.proto",
}
