// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SDPServiceClient is the client API for SDPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDPServiceClient interface {
	SDPSession(ctx context.Context, opts ...grpc.CallOption) (SDPService_SDPSessionClient, error)
}

type sDPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSDPServiceClient(cc grpc.ClientConnInterface) SDPServiceClient {
	return &sDPServiceClient{cc}
}

func (c *sDPServiceClient) SDPSession(ctx context.Context, opts ...grpc.CallOption) (SDPService_SDPSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SDPService_ServiceDesc.Streams[0], "/sdpgeneratedclient.SDPService/SDPSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &sDPServiceSDPSessionClient{stream}
	return x, nil
}

type SDPService_SDPSessionClient interface {
	Send(*SDPSessionReq) error
	Recv() (*SDPSessionResp, error)
	grpc.ClientStream
}

type sDPServiceSDPSessionClient struct {
	grpc.ClientStream
}

func (x *sDPServiceSDPSessionClient) Send(m *SDPSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sDPServiceSDPSessionClient) Recv() (*SDPSessionResp, error) {
	m := new(SDPSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SDPServiceServer is the server API for SDPService service.
// All implementations must embed UnimplementedSDPServiceServer
// for forward compatibility
type SDPServiceServer interface {
	SDPSession(SDPService_SDPSessionServer) error
	mustEmbedUnimplementedSDPServiceServer()
}

// UnimplementedSDPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSDPServiceServer struct {
}

func (UnimplementedSDPServiceServer) SDPSession(SDPService_SDPSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method SDPSession not implemented")
}
func (UnimplementedSDPServiceServer) mustEmbedUnimplementedSDPServiceServer() {}

// UnsafeSDPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDPServiceServer will
// result in compilation errors.
type UnsafeSDPServiceServer interface {
	mustEmbedUnimplementedSDPServiceServer()
}

func RegisterSDPServiceServer(s grpc.ServiceRegistrar, srv SDPServiceServer) {
	s.RegisterService(&SDPService_ServiceDesc, srv)
}

func _SDPService_SDPSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SDPServiceServer).SDPSession(&sDPServiceSDPSessionServer{stream})
}

type SDPService_SDPSessionServer interface {
	Send(*SDPSessionResp) error
	Recv() (*SDPSessionReq, error)
	grpc.ServerStream
}

type sDPServiceSDPSessionServer struct {
	grpc.ServerStream
}

func (x *sDPServiceSDPSessionServer) Send(m *SDPSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sDPServiceSDPSessionServer) Recv() (*SDPSessionReq, error) {
	m := new(SDPSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SDPService_ServiceDesc is the grpc.ServiceDesc for SDPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SDPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdpgeneratedclient.SDPService",
	HandlerType: (*SDPServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SDPSession",
			Handler:       _SDPService_SDPSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sdp.proto",
}
