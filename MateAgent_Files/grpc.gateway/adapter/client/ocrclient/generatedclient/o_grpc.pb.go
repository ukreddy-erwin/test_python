// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.2
// source: o.proto

package opb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcrServiceClient is the client API for OcrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcrServiceClient interface {
	OSession(ctx context.Context, opts ...grpc.CallOption) (OcrService_OSessionClient, error)
}

type ocrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOcrServiceClient(cc grpc.ClientConnInterface) OcrServiceClient {
	return &ocrServiceClient{cc}
}

func (c *ocrServiceClient) OSession(ctx context.Context, opts ...grpc.CallOption) (OcrService_OSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &OcrService_ServiceDesc.Streams[0], "/ogeneratedclient.OcrService/OSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &ocrServiceOSessionClient{stream}
	return x, nil
}

type OcrService_OSessionClient interface {
	Send(*OSessionReq) error
	Recv() (*OSessionResp, error)
	grpc.ClientStream
}

type ocrServiceOSessionClient struct {
	grpc.ClientStream
}

func (x *ocrServiceOSessionClient) Send(m *OSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ocrServiceOSessionClient) Recv() (*OSessionResp, error) {
	m := new(OSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OcrServiceServer is the server API for OcrService service.
// All implementations must embed UnimplementedOcrServiceServer
// for forward compatibility
type OcrServiceServer interface {
	OSession(OcrService_OSessionServer) error
	mustEmbedUnimplementedOcrServiceServer()
}

// UnimplementedOcrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOcrServiceServer struct {
}

func (UnimplementedOcrServiceServer) OSession(OcrService_OSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method OSession not implemented")
}
func (UnimplementedOcrServiceServer) mustEmbedUnimplementedOcrServiceServer() {}

// UnsafeOcrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcrServiceServer will
// result in compilation errors.
type UnsafeOcrServiceServer interface {
	mustEmbedUnimplementedOcrServiceServer()
}

func RegisterOcrServiceServer(s grpc.ServiceRegistrar, srv OcrServiceServer) {
	s.RegisterService(&OcrService_ServiceDesc, srv)
}

func _OcrService_OSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OcrServiceServer).OSession(&ocrServiceOSessionServer{stream})
}

type OcrService_OSessionServer interface {
	Send(*OSessionResp) error
	Recv() (*OSessionReq, error)
	grpc.ServerStream
}

type ocrServiceOSessionServer struct {
	grpc.ServerStream
}

func (x *ocrServiceOSessionServer) Send(m *OSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ocrServiceOSessionServer) Recv() (*OSessionReq, error) {
	m := new(OSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OcrService_ServiceDesc is the grpc.ServiceDesc for OcrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ogeneratedclient.OcrService",
	HandlerType: (*OcrServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OSession",
			Handler:       _OcrService_OSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "o.proto",
}
