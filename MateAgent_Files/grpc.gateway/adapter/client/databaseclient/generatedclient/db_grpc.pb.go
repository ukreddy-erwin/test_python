// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dbspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	DatabaseSession(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_DatabaseSessionClient, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) DatabaseSession(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_DatabaseSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatabaseService_ServiceDesc.Streams[0], "/dbgeneratedclient.DatabaseService/DatabaseSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseServiceDatabaseSessionClient{stream}
	return x, nil
}

type DatabaseService_DatabaseSessionClient interface {
	Send(*DBSessionReq) error
	Recv() (*DBSessionResp, error)
	grpc.ClientStream
}

type databaseServiceDatabaseSessionClient struct {
	grpc.ClientStream
}

func (x *databaseServiceDatabaseSessionClient) Send(m *DBSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *databaseServiceDatabaseSessionClient) Recv() (*DBSessionResp, error) {
	m := new(DBSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility
type DatabaseServiceServer interface {
	DatabaseSession(DatabaseService_DatabaseSessionServer) error
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServiceServer struct {
}

func (UnimplementedDatabaseServiceServer) DatabaseSession(DatabaseService_DatabaseSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method DatabaseSession not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_DatabaseSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatabaseServiceServer).DatabaseSession(&databaseServiceDatabaseSessionServer{stream})
}

type DatabaseService_DatabaseSessionServer interface {
	Send(*DBSessionResp) error
	Recv() (*DBSessionReq, error)
	grpc.ServerStream
}

type databaseServiceDatabaseSessionServer struct {
	grpc.ServerStream
}

func (x *databaseServiceDatabaseSessionServer) Send(m *DBSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *databaseServiceDatabaseSessionServer) Recv() (*DBSessionReq, error) {
	m := new(DBSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbgeneratedclient.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DatabaseSession",
			Handler:       _DatabaseService_DatabaseSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "db.proto",
}
