// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.5.1
// source: excel.proto

package excelpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExcelOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileType string `protobuf:"bytes,4,opt,name=fileType,proto3" json:"fileType,omitempty"`
	File     []byte `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
	OpenAs   string `protobuf:"bytes,6,opt,name=openAs,proto3" json:"openAs,omitempty"`
	IsHeader string `protobuf:"bytes,7,opt,name=isHeader,proto3" json:"isHeader,omitempty"`
}

func (x *ExcelOpen) Reset() {
	*x = ExcelOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcelOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelOpen) ProtoMessage() {}

func (x *ExcelOpen) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelOpen.ProtoReflect.Descriptor instead.
func (*ExcelOpen) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{0}
}

func (x *ExcelOpen) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExcelOpen) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExcelOpen) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ExcelOpen) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *ExcelOpen) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ExcelOpen) GetOpenAs() string {
	if x != nil {
		return x.OpenAs
	}
	return ""
}

func (x *ExcelOpen) GetIsHeader() string {
	if x != nil {
		return x.IsHeader
	}
	return ""
}

type ReadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   int32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ReadData) Reset() {
	*x = ReadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadData) ProtoMessage() {}

func (x *ReadData) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadData.ProtoReflect.Descriptor instead.
func (*ReadData) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{1}
}

func (x *ReadData) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ReadData) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

type ExcelSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionName string        `protobuf:"bytes,1,opt,name=actionName,proto3" json:"actionName,omitempty"`
	ExcelReq   []*Dictionary `protobuf:"bytes,2,rep,name=excelReq,proto3" json:"excelReq,omitempty"`
}

func (x *ExcelSessionReq) Reset() {
	*x = ExcelSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcelSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelSessionReq) ProtoMessage() {}

func (x *ExcelSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelSessionReq.ProtoReflect.Descriptor instead.
func (*ExcelSessionReq) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{2}
}

func (x *ExcelSessionReq) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *ExcelSessionReq) GetExcelReq() []*Dictionary {
	if x != nil {
		return x.ExcelReq
	}
	return nil
}

type ExcelSessionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status     bool          `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Data       []*Dictionary `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Set        string        `protobuf:"bytes,4,opt,name=set,proto3" json:"set,omitempty"`
	LogMessage string        `protobuf:"bytes,5,opt,name=logMessage,proto3" json:"logMessage,omitempty"`
}

func (x *ExcelSessionResp) Reset() {
	*x = ExcelSessionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcelSessionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelSessionResp) ProtoMessage() {}

func (x *ExcelSessionResp) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelSessionResp.ProtoReflect.Descriptor instead.
func (*ExcelSessionResp) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{3}
}

func (x *ExcelSessionResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExcelSessionResp) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ExcelSessionResp) GetData() []*Dictionary {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExcelSessionResp) GetSet() string {
	if x != nil {
		return x.Set
	}
	return ""
}

func (x *ExcelSessionResp) GetLogMessage() string {
	if x != nil {
		return x.LogMessage
	}
	return ""
}

type Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ByteValue []byte   `protobuf:"bytes,3,opt,name=byteValue,proto3" json:"byteValue,omitempty"`
	ListValue []string `protobuf:"bytes,4,rep,name=listValue,proto3" json:"listValue,omitempty"`
}

func (x *Dictionary) Reset() {
	*x = Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary) ProtoMessage() {}

func (x *Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary.ProtoReflect.Descriptor instead.
func (*Dictionary) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{4}
}

func (x *Dictionary) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Dictionary) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Dictionary) GetByteValue() []byte {
	if x != nil {
		return x.ByteValue
	}
	return nil
}

func (x *Dictionary) GetListValue() []string {
	if x != nil {
		return x.ListValue
	}
	return nil
}

type ExcelReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []string `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *ExcelReadResp) Reset() {
	*x = ExcelReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcelReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelReadResp) ProtoMessage() {}

func (x *ExcelReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelReadResp.ProtoReflect.Descriptor instead.
func (*ExcelReadResp) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{5}
}

func (x *ExcelReadResp) GetRows() []string {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ExcelOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountRow int32 `protobuf:"varint,1,opt,name=countRow,proto3" json:"countRow,omitempty"`
}

func (x *ExcelOpenResp) Reset() {
	*x = ExcelOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_excel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcelOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelOpenResp) ProtoMessage() {}

func (x *ExcelOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_excel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelOpenResp.ProtoReflect.Descriptor instead.
func (*ExcelOpenResp) Descriptor() ([]byte, []int) {
	return file_excel_proto_rawDescGZIP(), []int{6}
}

func (x *ExcelOpenResp) GetCountRow() int32 {
	if x != nil {
		return x.CountRow
	}
	return 0
}

var File_excel_proto protoreflect.FileDescriptor

var file_excel_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x65,
	0x78, 0x63, 0x65, 0x6c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x63,
	0x65, 0x6c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78,
	0x63, 0x65, 0x6c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x2b, 0x0a, 0x0d,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x32, 0x73, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x65, 0x78, 0x63, 0x65,
	0x6c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_excel_proto_rawDescOnce sync.Once
	file_excel_proto_rawDescData = file_excel_proto_rawDesc
)

func file_excel_proto_rawDescGZIP() []byte {
	file_excel_proto_rawDescOnce.Do(func() {
		file_excel_proto_rawDescData = protoimpl.X.CompressGZIP(file_excel_proto_rawDescData)
	})
	return file_excel_proto_rawDescData
}

var file_excel_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_excel_proto_goTypes = []interface{}{
	(*ExcelOpen)(nil),        // 0: excelgeneratedclient.ExcelOpen
	(*ReadData)(nil),         // 1: excelgeneratedclient.ReadData
	(*ExcelSessionReq)(nil),  // 2: excelgeneratedclient.ExcelSessionReq
	(*ExcelSessionResp)(nil), // 3: excelgeneratedclient.ExcelSessionResp
	(*Dictionary)(nil),       // 4: excelgeneratedclient.Dictionary
	(*ExcelReadResp)(nil),    // 5: excelgeneratedclient.ExcelReadResp
	(*ExcelOpenResp)(nil),    // 6: excelgeneratedclient.ExcelOpenResp
}
var file_excel_proto_depIdxs = []int32{
	4, // 0: excelgeneratedclient.ExcelSessionReq.excelReq:type_name -> excelgeneratedclient.Dictionary
	4, // 1: excelgeneratedclient.ExcelSessionResp.data:type_name -> excelgeneratedclient.Dictionary
	2, // 2: excelgeneratedclient.ExcelService.ExcelSession:input_type -> excelgeneratedclient.ExcelSessionReq
	3, // 3: excelgeneratedclient.ExcelService.ExcelSession:output_type -> excelgeneratedclient.ExcelSessionResp
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_excel_proto_init() }
func file_excel_proto_init() {
	if File_excel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_excel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcelOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_excel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_excel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcelSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_excel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcelSessionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_excel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_excel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcelReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_excel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcelOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_excel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_excel_proto_goTypes,
		DependencyIndexes: file_excel_proto_depIdxs,
		MessageInfos:      file_excel_proto_msgTypes,
	}.Build()
	File_excel_proto = out.File
	file_excel_proto_rawDesc = nil
	file_excel_proto_goTypes = nil
	file_excel_proto_depIdxs = nil
}
