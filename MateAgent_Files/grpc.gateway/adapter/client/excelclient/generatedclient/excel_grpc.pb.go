// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package excelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExcelServiceClient is the client API for ExcelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelServiceClient interface {
	ExcelSession(ctx context.Context, opts ...grpc.CallOption) (ExcelService_ExcelSessionClient, error)
}

type excelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelServiceClient(cc grpc.ClientConnInterface) ExcelServiceClient {
	return &excelServiceClient{cc}
}

func (c *excelServiceClient) ExcelSession(ctx context.Context, opts ...grpc.CallOption) (ExcelService_ExcelSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExcelService_ServiceDesc.Streams[0], "/excelgeneratedclient.ExcelService/ExcelSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &excelServiceExcelSessionClient{stream}
	return x, nil
}

type ExcelService_ExcelSessionClient interface {
	Send(*ExcelSessionReq) error
	Recv() (*ExcelSessionResp, error)
	grpc.ClientStream
}

type excelServiceExcelSessionClient struct {
	grpc.ClientStream
}

func (x *excelServiceExcelSessionClient) Send(m *ExcelSessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *excelServiceExcelSessionClient) Recv() (*ExcelSessionResp, error) {
	m := new(ExcelSessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExcelServiceServer is the server API for ExcelService service.
// All implementations must embed UnimplementedExcelServiceServer
// for forward compatibility
type ExcelServiceServer interface {
	ExcelSession(ExcelService_ExcelSessionServer) error
	mustEmbedUnimplementedExcelServiceServer()
}

// UnimplementedExcelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExcelServiceServer struct {
}

func (UnimplementedExcelServiceServer) ExcelSession(ExcelService_ExcelSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method ExcelSession not implemented")
}
func (UnimplementedExcelServiceServer) mustEmbedUnimplementedExcelServiceServer() {}

// UnsafeExcelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelServiceServer will
// result in compilation errors.
type UnsafeExcelServiceServer interface {
	mustEmbedUnimplementedExcelServiceServer()
}

func RegisterExcelServiceServer(s grpc.ServiceRegistrar, srv ExcelServiceServer) {
	s.RegisterService(&ExcelService_ServiceDesc, srv)
}

func _ExcelService_ExcelSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExcelServiceServer).ExcelSession(&excelServiceExcelSessionServer{stream})
}

type ExcelService_ExcelSessionServer interface {
	Send(*ExcelSessionResp) error
	Recv() (*ExcelSessionReq, error)
	grpc.ServerStream
}

type excelServiceExcelSessionServer struct {
	grpc.ServerStream
}

func (x *excelServiceExcelSessionServer) Send(m *ExcelSessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *excelServiceExcelSessionServer) Recv() (*ExcelSessionReq, error) {
	m := new(ExcelSessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExcelService_ServiceDesc is the grpc.ServiceDesc for ExcelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "excelgeneratedclient.ExcelService",
	HandlerType: (*ExcelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExcelSession",
			Handler:       _ExcelService_ExcelSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "excel.proto",
}
