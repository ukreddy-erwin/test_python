// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.2
// source: ra.proto

package rapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordingAgentServiceClient is the client API for RecordingAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingAgentServiceClient interface {
	RASession(ctx context.Context, opts ...grpc.CallOption) (RecordingAgentService_RASessionClient, error)
}

type recordingAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingAgentServiceClient(cc grpc.ClientConnInterface) RecordingAgentServiceClient {
	return &recordingAgentServiceClient{cc}
}

func (c *recordingAgentServiceClient) RASession(ctx context.Context, opts ...grpc.CallOption) (RecordingAgentService_RASessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordingAgentService_ServiceDesc.Streams[0], "/rageneratedclient.RecordingAgentService/RASession", opts...)
	if err != nil {
		return nil, err
	}
	x := &recordingAgentServiceRASessionClient{stream}
	return x, nil
}

type RecordingAgentService_RASessionClient interface {
	Send(*RASessionReq) error
	Recv() (*RASessionResp, error)
	grpc.ClientStream
}

type recordingAgentServiceRASessionClient struct {
	grpc.ClientStream
}

func (x *recordingAgentServiceRASessionClient) Send(m *RASessionReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recordingAgentServiceRASessionClient) Recv() (*RASessionResp, error) {
	m := new(RASessionResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordingAgentServiceServer is the server API for RecordingAgentService service.
// All implementations must embed UnimplementedRecordingAgentServiceServer
// for forward compatibility
type RecordingAgentServiceServer interface {
	RASession(RecordingAgentService_RASessionServer) error
	mustEmbedUnimplementedRecordingAgentServiceServer()
}

// UnimplementedRecordingAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordingAgentServiceServer struct {
}

func (UnimplementedRecordingAgentServiceServer) RASession(RecordingAgentService_RASessionServer) error {
	return status.Errorf(codes.Unimplemented, "method RASession not implemented")
}
func (UnimplementedRecordingAgentServiceServer) mustEmbedUnimplementedRecordingAgentServiceServer() {}

// UnsafeRecordingAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingAgentServiceServer will
// result in compilation errors.
type UnsafeRecordingAgentServiceServer interface {
	mustEmbedUnimplementedRecordingAgentServiceServer()
}

func RegisterRecordingAgentServiceServer(s grpc.ServiceRegistrar, srv RecordingAgentServiceServer) {
	s.RegisterService(&RecordingAgentService_ServiceDesc, srv)
}

func _RecordingAgentService_RASession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecordingAgentServiceServer).RASession(&recordingAgentServiceRASessionServer{stream})
}

type RecordingAgentService_RASessionServer interface {
	Send(*RASessionResp) error
	Recv() (*RASessionReq, error)
	grpc.ServerStream
}

type recordingAgentServiceRASessionServer struct {
	grpc.ServerStream
}

func (x *recordingAgentServiceRASessionServer) Send(m *RASessionResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recordingAgentServiceRASessionServer) Recv() (*RASessionReq, error) {
	m := new(RASessionReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordingAgentService_ServiceDesc is the grpc.ServiceDesc for RecordingAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rageneratedclient.RecordingAgentService",
	HandlerType: (*RecordingAgentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RASession",
			Handler:       _RecordingAgentService_RASession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ra.proto",
}
